import base64
code="aW1wb3J0IHB5bW9uZ28NCmltcG9ydCB1cmxsaWINCmltcG9ydCBodHRwLmNvb2tpZWphciBhcyBjb29raWVsaWINCmltcG9ydCByYW5kb20NCmltcG9ydCByZQ0KaW1wb3J0IHN0cmluZw0KaW1wb3J0IHN5cw0KaW1wb3J0IGdldG9wdA0KDQojIHRoaXMgaXMgYSB2YWxpZGF0aW9uIHByb2dyYW0gdG8gbWFrZSBzdXJlIHRoYXQgdGhlIGJsb2cgd29ya3MgY29ycmVjdGx5Lg0KIyBJZiB5b3UgYXJlIHJlYWRpbmcgdGhpcyBpbiBjbGVhciB0ZXh0LCB5b3UgYXJlIHByb2JhYmx5IHZpb2xhdGluZyB0aGUgaG9ub3IgY29kZQ0KDQoNCiMgZGVjbGFyZSB0aGUgdmFyaWFibGVzIHRvIGNvbm5lY3QgdG8gZGINCmNvbm5lY3Rpb24gPSBOb25lDQpkYiA9IE5vbmUNCg0Kd2ViaG9zdCA9ICJsb2NhbGhvc3Q6ODA4MiINCm1vbmdvc3RyID0gIm1vbmdvZGI6Ly9sb2NhbGhvc3Q6MjcwMTciDQpkYl9uYW1lID0gImJsb2ciDQoNCg0KIyBtYWtlcyBhIGxpdHRsZSBzYWx0DQpkZWYgbWFrZV9zYWx0KG4pOg0KICAgIHNhbHQgPSAiIg0KICAgIGZvciBpIGluIHJhbmdlKG4pOg0KICAgICAgICBzYWx0ID0gc2FsdCArIHJhbmRvbS5jaG9pY2Uoc3RyaW5nLmFzY2lpX2xldHRlcnMpDQogICAgcmV0dXJuIHNhbHQNCg0KDQpkZWYgY3JlYXRlX3VzZXIodXNlcm5hbWUsIHBhc3N3b3JkKToNCiAgICB0cnk6DQogICAgICAgIHByaW50ICgiVHJ5aW5nIHRvIGNyZWF0ZSBhIHRlc3QgdXNlciAiLCB1c2VybmFtZSkNCiAgICAgICAgY2ogPSBjb29raWVsaWIuQ29va2llSmFyKCkNCiAgICAgICAgdXJsID0gImh0dHA6Ly97MH0vc2lnbnVwIi5mb3JtYXQod2ViaG9zdCkNCg0KICAgICAgICBkYXRhID0gdXJsbGliLnVybGVuY29kZShbKCJlbWFpbCIsIiIpLCgidXNlcm5hbWUiLHVzZXJuYW1lKSwgKCJwYXNzd29yZCIscGFzc3dvcmQpLCAoInZlcmlmeSIscGFzc3dvcmQpXSkNCiAgICAgICAgcmVxdWVzdCA9IHVybGxpYjIuUmVxdWVzdCh1cmw9dXJsLCBkYXRhPWRhdGEpDQogICAgICAgIG9wZW5lciA9IHVybGxpYjIuYnVpbGRfb3BlbmVyKHVybGxpYjIuSFRUUENvb2tpZVByb2Nlc3NvcihjaikpDQogICAgICAgIGYgPSBvcGVuZXIub3BlbihyZXF1ZXN0KQ0KDQogICAgICAgIHVzZXJzID0gZGIudXNlcnMNCiAgICAgICAgdXNlciA9IHVzZXJzLmZpbmRfb25lKHsnX2lkJzp1c2VybmFtZX0pDQogICAgICAgIGlmICh1c2VyID09IE5vbmUpOg0KICAgICAgICAgICAgcHJpbnQgKCJDb3VsZCBub3QgZmluZCB0aGUgdGVzdCB1c2VyICIsIHVzZXJuYW1lLCAiaW4gdGhlIHVzZXJzIGNvbGxlY3Rpb24uIikNCiAgICAgICAgICAgIHJldHVybiBGYWxzZQ0KICAgICAgICBwcmludCAoIkZvdW5kIHRoZSB0ZXN0IHVzZXIgIiwgdXNlcm5hbWUsICIgaW4gdGhlIHVzZXJzIGNvbGxlY3Rpb24iKQ0KDQogICAgICAgICMgY2hlY2sgdGhhdCB0aGUgdXNlciBoYXMgYmVlbiBidWlsdA0KICAgICAgICByZXN1bHQgPSBmLnJlYWQoKQ0KICAgICAgICBleHByID0gcmUuY29tcGlsZSgiV2VsY29tZVxzKyIrIHVzZXJuYW1lKQ0KICAgICAgICBpZiBleHByLnNlYXJjaChyZXN1bHQpOg0KICAgICAgICAgICAgcmV0dXJuIFRydWUNCiAgICAgICAgDQogICAgICAgIHByaW50ICgiV2hlbiB3ZSB0cmllZCB0byBjcmVhdGUgYSB1c2VyLCBoZXJlIGlzIHRoZSBvdXRwdXQgd2UgZ290XG4iKQ0KICAgICAgICBwcmludCAocmVzdWx0KQ0KICAgICAgICANCiAgICAgICAgcmV0dXJuIEZhbHNlDQogICAgZXhjZXB0Og0KICAgICAgICBwcmludCAoInRoZSByZXF1ZXN0IHRvICIsIHVybCwgIiBmYWlsZWQsIHNvIHlvdXIgYmxvZyBtYXkgbm90IGJlIHJ1bm5pbmcuIikNCiAgICAgICAgcmV0dXJuIEZhbHNlDQoNCg0KZGVmIHRyeV90b19sb2dpbih1c2VybmFtZSwgcGFzc3dvcmQpOg0KDQogICAgdHJ5Og0KICAgICAgICBwcmludCAoIlRyeWluZyB0byBsb2dpbiBmb3IgdGVzdCB1c2VyICIsIHVzZXJuYW1lKQ0KICAgICAgICBjaiA9IGNvb2tpZWxpYi5Db29raWVKYXIoKQ0KICAgICAgICB1cmwgPSAiaHR0cDovL3swfS9sb2dpbiIuZm9ybWF0KHdlYmhvc3QpDQoNCiAgICAgICAgZGF0YSA9IHVybGxpYi51cmxlbmNvZGUoWygidXNlcm5hbWUiLHVzZXJuYW1lKSwgKCJwYXNzd29yZCIscGFzc3dvcmQpXSkNCiAgICAgICAgcmVxdWVzdCA9IHVybGxpYjIuUmVxdWVzdCh1cmw9dXJsLCBkYXRhPWRhdGEpDQogICAgICAgIG9wZW5lciA9IHVybGxpYjIuYnVpbGRfb3BlbmVyKHVybGxpYjIuSFRUUENvb2tpZVByb2Nlc3NvcihjaikpDQogICAgICAgIGYgPSBvcGVuZXIub3BlbihyZXF1ZXN0KQ0KDQogICAgICAgICMgY2hlY2sgZm9yIHN1Y2Nlc3NmdWwgbG9naW4NCiAgICAgICAgcmVzdWx0ID0gZi5yZWFkKCkNCiAgICAgICAgZXhwciA9IHJlLmNvbXBpbGUoIldlbGNvbWVccysiKyB1c2VybmFtZSkNCiAgICAgICAgaWYgZXhwci5zZWFyY2gocmVzdWx0KToNCiAgICAgICAgICAgIHJldHVybiBUcnVlDQoNCiAgICAgICAgcHJpbnQgKCJXaGVuIHdlIHRyaWVkIHRvIGxvZ2luLCBoZXJlIGlzIHRoZSBvdXRwdXQgd2UgZ290XG4iKQ0KICAgICAgICBwcmludCAocmVzdWx0KQ0KICAgICAgICByZXR1cm4gRmFsc2UNCiAgICBleGNlcHQ6DQogICAgICAgIHByaW50ICgidGhlIHJlcXVlc3QgdG8gIiwgdXJsLCAiIGZhaWxlZCwgc28geW91ciBibG9nIG1heSBub3QgYmUgcnVubmluZy4iKQ0KICAgICAgICByYWlzZQ0KICAgICAgICByZXR1cm4gRmFsc2UNCg0KDQojIGNvbW1hbmQgbGluZSBhcmcgcGFyc2luZyB0byBtYWtlIGZvbGtzIGhhcHB5IHdobyB3YW50IHRvIHJ1biBhdCBtb25nb2xhYnMgb3IgbW9uZ29ocQ0KIyB0aGlzIGZ1bmN0aW9ucyB1c2VzIGdsb2JhbCB2YXJzIHRvIGNvbW11bmljYXRlLiBmb3JnaXZlIG1lLg0KZGVmIGFyZ19wYXJzaW5nKGFyZ3YpOg0KDQogICAgZ2xvYmFsIHdlYmhvc3QNCiAgICBnbG9iYWwgbW9uZ29zdHINCiAgICBnbG9iYWwgZGJfbmFtZQ0KDQogICAgdHJ5Og0KICAgICAgICBvcHRzLCBhcmdzID0gZ2V0b3B0LmdldG9wdChhcmd2LCAiLXA6LW06LWQ6IikNCiAgICBleGNlcHQgZ2V0b3B0LkdldG9wdEVycm9yOg0KICAgICAgICBwcmludCAoInVzYWdlIHZhbGlkYXRlLnB5IC1wIHdlYmhvc3QgLW0gbW9uZ29Db25uZWN0U3RyaW5nIC1kIGRhdGFiYXNlTmFtZSIpDQogICAgICAgIHByaW50ICgiXHR3ZWJob3N0IGRlZmF1bHRzIHRvIHswfSIuZm9ybWF0KHdlYmhvc3QpKQ0KICAgICAgICBwcmludCAoIlx0bW9uZ29Db25uZWN0aW9uU3RyaW5nIGRlZmF1bHQgdG8gezB9Ii5mb3JtYXQobW9uZ29zdHIpKQ0KICAgICAgICBwcmludCAoIlx0ZGF0YWJhc2VOYW1lIGRlZmF1bHRzIHRvIHswfSIuZm9ybWF0KGRiX25hbWUpKQ0KICAgICAgICBzeXMuZXhpdCgyKQ0KICAgIGZvciBvcHQsIGFyZyBpbiBvcHRzOg0KICAgICAgICBpZiAob3B0ID09ICctaCcpOg0KICAgICAgICAgICAgcHJpbnQgKCJ1c2FnZSB2YWxpZGF0ZS5weSAtcCB3ZWJob3N0IC1tIG1vbmdvQ29ubmVjdFN0cmluZyAtZCBkYXRhYmFzZU5hbWUiKQ0KICAgICAgICAgICAgc3lzLmV4aXQoMikNCiAgICAgICAgZWxpZiBvcHQgaW4gKCItcCIpOg0KICAgICAgICAgICAgd2ViaG9zdCA9IGFyZw0KICAgICAgICAgICAgcHJpbnQgKCJPdmVycmlkaW5nIEhUVFAgaG9zdCB0byBiZSAiLCB3ZWJob3N0KQ0KICAgICAgICBlbGlmIG9wdCBpbiAoIi1tIik6DQogICAgICAgICAgICBtb25nb3N0ciA9IGFyZw0KICAgICAgICAgICAgcHJpbnQgKCJPdmVycmlkaW5nIE1vbmdvREIgY29ubmVjdGlvbiBzdHJpbmcgdG8gYmUgIiwgbW9uZ29zdHIpDQogICAgICAgIGVsaWYgb3B0IGluICgiLWQiKToNCiAgICAgICAgICAgIGRiX25hbWUgPSBhcmcNCiAgICAgICAgICAgIHByaW50ICgiT3ZlcnJpZGluZyBNb25nb0RCIGRhdGFiYXNlIHRvIGJlICIsIGRiX25hbWUpDQoNCg0KIyBtYWluIHNlY3Rpb24gb2YgdGhlIGNvZGUNCmRlZiBtYWluKGFyZ3YpOg0KICAgICAgICAgICAgDQogICAgYXJnX3BhcnNpbmcoYXJndikNCiAgICBnbG9iYWwgY29ubmVjdGlvbg0KICAgIGdsb2JhbCBkYg0KDQogICAgcHJpbnQgKCJXZWxjb21lIHRvIHRoZSBIVyAyLjMgdmFsaWRhdGlvbiB0ZXN0ZXIiKQ0KDQogICAgIyBjb25uZWN0IHRvIHRoZSBkYiAobW9uZ29zdHIgd2FzIHNldCBpbiBhcmdfcGFyc2luZykNCiAgICBjb25uZWN0aW9uID0gcHltb25nby5Nb25nb0NsaWVudChtb25nb3N0cikNCiAgICBkYiA9IGNvbm5lY3Rpb25bZGJfbmFtZV0NCiAgICAgICAgICAgIA0KDQogICAgdXNlcm5hbWUgPSBtYWtlX3NhbHQoNykNCiAgICBwYXNzd29yZCA9IG1ha2Vfc2FsdCg4KQ0KDQogICAgIyB0cnkgdG8gY3JlYXRlIHVzZXINCg0KICAgIGlmIChjcmVhdGVfdXNlcih1c2VybmFtZSwgcGFzc3dvcmQpKToNCiAgICAgICAgcHJpbnQgKCJVc2VyIGNyZWF0aW9uIHN1Y2Nlc3NmdWwuICIpDQogICAgICAgICMgdHJ5IHRvIGxvZ2luDQogICAgICAgIGlmICh0cnlfdG9fbG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKSk6DQogICAgICAgICAgICBwcmludCAoIlVzZXIgbG9naW4gc3VjY2Vzc2Z1bC4iKQ0KICAgICAgICAgICAgcHJpbnQgKCJWYWxpZGF0aW9uIENvZGUgaXMgIiwgImprZmRzNTgzNGo5OGZubTM5bmpmMDkyMGYwMiIpDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBwcmludCAoIlVzZXIgbG9naW4gZmFpbGVkIikNCiAgICAgICAgICAgIHByaW50ICgiU29ycnksIHlvdSBoYXZlIG5vdCBzb2x2ZWQgaXQgeWV0LiIpDQoNCiAgICBlbHNlOg0KICAgICAgICBwcmludCAoIlNvcnJ5LCB5b3UgaGF2ZSBub3Qgc29sdmVkIGl0IHlldC4iKQ0KICAgICAgICBzeXMuZXhpdCgxKQ0KDQoNCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6DQogICAgbWFpbihzeXMuYXJndlsxOl0pDQoNCg0KDQoNCg0KDQoNCg=="
eval(compile(base64.b64decode(code), "<string>", 'exec'))
