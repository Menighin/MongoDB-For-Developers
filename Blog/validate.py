import base64
code="aW1wb3J0IHB5bW9uZ28NCmltcG9ydCB1cmxsaWINCmltcG9ydCBodHRwLmNvb2tpZWphciBhcyBjb29raWVsaWINCmltcG9ydCByYW5kb20NCmltcG9ydCByZQ0KaW1wb3J0IHN0cmluZw0KaW1wb3J0IHN5cw0KaW1wb3J0IGdldG9wdA0KDQojIHRoaXMgaXMgYSB2YWxpZGF0aW9uIHByb2dyYW0gdG8gbWFrZSBzdXJlIHRoYXQgdGhlIGJsb2cgd29ya3MgY29ycmVjdGx5Lg0KIyBJZiB5b3UgYXJlIHJlYWRpbmcgdGhpcyBpbiBjbGVhciB0ZXh0LCB5b3UgYXJlIHByb2JhYmx5IHZpb2xhdGluZyB0aGUgaG9ub3IgY29kZQ0KDQoNCiMgZGVjbGFyZSB0aGUgdmFyaWFibGVzIHRvIGNvbm5lY3QgdG8gZGINCmNvbm5lY3Rpb24gPSBOb25lDQpkYiA9IE5vbmUNCg0Kd2ViaG9zdCA9ICJsb2NhbGhvc3Q6ODA4MiINCm1vbmdvc3RyID0gIm1vbmdvZGI6Ly9sb2NhbGhvc3Q6MjcwMTciDQpkYl9uYW1lID0gImJsb2ciDQoNCg0KIyBtYWtlcyBhIGxpdHRsZSBzYWx0DQpkZWYgbWFrZV9zYWx0KG4pOg0KICAgIHNhbHQgPSAiIg0KICAgIGZvciBpIGluIHJhbmdlKG4pOg0KICAgICAgICBzYWx0ID0gc2FsdCArIHJhbmRvbS5jaG9pY2Uoc3RyaW5nLmFzY2lpX2xldHRlcnMpDQogICAgcmV0dXJuIHNhbHQNCg0KDQpkZWYgY3JlYXRlX3VzZXIodXNlcm5hbWUsIHBhc3N3b3JkKToNCiAgICB0cnk6DQogICAgICAgIHByaW50ICgiVHJ5aW5nIHRvIGNyZWF0ZSBhIHRlc3QgdXNlciAiLCB1c2VybmFtZSkNCiAgICAgICAgY2ogPSBjb29raWVsaWIuQ29va2llSmFyKCkNCiAgICAgICAgdXJsID0gImh0dHA6Ly97MH0vc2lnbnVwIi5mb3JtYXQod2ViaG9zdCkNCg0KICAgICAgICBkYXRhID0gdXJsbGliLnBhcnNlLnVybGVuY29kZShbKCJlbWFpbCIsIiIpLCgidXNlcm5hbWUiLHVzZXJuYW1lKSwgKCJwYXNzd29yZCIscGFzc3dvcmQpLCAoInZlcmlmeSIscGFzc3dvcmQpXSkuZW5jb2RlKCd1dGYtOCcpDQogICAgICAgIHJlcXVlc3QgPSB1cmxsaWIucmVxdWVzdC5SZXF1ZXN0KHVybD11cmwsIGRhdGE9ZGF0YSkNCiAgICAgICAgb3BlbmVyID0gdXJsbGliLnJlcXVlc3QuYnVpbGRfb3BlbmVyKHVybGxpYi5yZXF1ZXN0LkhUVFBDb29raWVQcm9jZXNzb3IoY2opKQ0KICAgICAgICBmID0gb3BlbmVyLm9wZW4ocmVxdWVzdCkNCg0KICAgICAgICB1c2VycyA9IGRiLnVzZXJzDQogICAgICAgIHVzZXIgPSB1c2Vycy5maW5kX29uZSh7J19pZCc6dXNlcm5hbWV9KQ0KICAgICAgICBpZiAodXNlciA9PSBOb25lKToNCiAgICAgICAgCXByaW50ICgiQ291bGQgbm90IGZpbmQgdGhlIHRlc3QgdXNlciAiLCB1c2VybmFtZSwgImluIHRoZSB1c2VycyBjb2xsZWN0aW9uLiIpDQogICAgICAgIAlyZXR1cm4gRmFsc2UNCiAgICAgICAgcHJpbnQgKCJGb3VuZCB0aGUgdGVzdCB1c2VyICIsIHVzZXJuYW1lLCAiIGluIHRoZSB1c2VycyBjb2xsZWN0aW9uIikNCg0KICAgICAgICAjIGNoZWNrIHRoYXQgdGhlIHVzZXIgaGFzIGJlZW4gYnVpbHQNCiAgICAgICAgcmVzdWx0ID0gZi5yZWFkKCkuZGVjb2RlKCd1dGYtOCcpDQogICAgICAgIGV4cHIgPSByZS5jb21waWxlKCJXZWxjb21lXHMrIisgdXNlcm5hbWUpDQogICAgICAgIGlmIGV4cHIuc2VhcmNoKHJlc3VsdCk6DQogICAgICAgIAlyZXR1cm4gVHJ1ZQ0KICAgICAgICANCiAgICAgICAgcHJpbnQgKCJXaGVuIHdlIHRyaWVkIHRvIGNyZWF0ZSBhIHVzZXIsIGhlcmUgaXMgdGhlIG91dHB1dCB3ZSBnb3RcbiIpDQogICAgICAgIHByaW50IChyZXN1bHQpDQogICAgICAgIA0KICAgICAgICByZXR1cm4gRmFsc2UNCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6DQogICAgICAgIHByaW50ICgidGhlIHJlcXVlc3QgdG8gIiwgdXJsLCAiIGZhaWxlZCwgc28geW91ciBibG9nIG1heSBub3QgYmUgcnVubmluZy4iKQ0KICAgICAgICByZXR1cm4gRmFsc2UNCg0KDQpkZWYgdHJ5X3RvX2xvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCk6DQoNCiAgICB0cnk6DQogICAgICAgIHByaW50ICgiVHJ5aW5nIHRvIGxvZ2luIGZvciB0ZXN0IHVzZXIgIiwgdXNlcm5hbWUpDQogICAgICAgIGNqID0gY29va2llbGliLkNvb2tpZUphcigpDQogICAgICAgIHVybCA9ICJodHRwOi8vezB9L2xvZ2luIi5mb3JtYXQod2ViaG9zdCkNCg0KICAgICAgICBkYXRhID0gdXJsbGliLnBhcnNlLnVybGVuY29kZShbKCJ1c2VybmFtZSIsdXNlcm5hbWUpLCAoInBhc3N3b3JkIixwYXNzd29yZCldKS5lbmNvZGUoJ3V0Zi04JykNCiAgICAgICAgcmVxdWVzdCA9IHVybGxpYi5yZXF1ZXN0LlJlcXVlc3QodXJsPXVybCwgZGF0YT1kYXRhKQ0KICAgICAgICBvcGVuZXIgPSB1cmxsaWIucmVxdWVzdC5idWlsZF9vcGVuZXIodXJsbGliLnJlcXVlc3QuSFRUUENvb2tpZVByb2Nlc3NvcihjaikpDQogICAgICAgIGYgPSBvcGVuZXIub3BlbihyZXF1ZXN0KQ0KDQogICAgICAgICMgY2hlY2sgZm9yIHN1Y2Nlc3NmdWwgbG9naW4NCiAgICAgICAgcmVzdWx0ID0gZi5yZWFkKCkuZGVjb2RlKCd1dGYtOCcpDQogICAgICAgIGV4cHIgPSByZS5jb21waWxlKCJXZWxjb21lXHMrIisgdXNlcm5hbWUpDQogICAgICAgIGlmIGV4cHIuc2VhcmNoKHJlc3VsdCk6DQogICAgICAgICAgICByZXR1cm4gVHJ1ZQ0KDQogICAgICAgIHByaW50ICgiV2hlbiB3ZSB0cmllZCB0byBsb2dpbiwgaGVyZSBpcyB0aGUgb3V0cHV0IHdlIGdvdFxuIikNCiAgICAgICAgcHJpbnQgKHJlc3VsdCkNCiAgICAgICAgcmV0dXJuIEZhbHNlDQogICAgZXhjZXB0Og0KICAgICAgICBwcmludCAoInRoZSByZXF1ZXN0IHRvICIsIHVybCwgIiBmYWlsZWQsIHNvIHlvdXIgYmxvZyBtYXkgbm90IGJlIHJ1bm5pbmcuIikNCiAgICAgICAgcmFpc2UNCiAgICAgICAgcmV0dXJuIEZhbHNlDQoNCg0KIyBjb21tYW5kIGxpbmUgYXJnIHBhcnNpbmcgdG8gbWFrZSBmb2xrcyBoYXBweSB3aG8gd2FudCB0byBydW4gYXQgbW9uZ29sYWJzIG9yIG1vbmdvaHENCiMgdGhpcyBmdW5jdGlvbnMgdXNlcyBnbG9iYWwgdmFycyB0byBjb21tdW5pY2F0ZS4gZm9yZ2l2ZSBtZS4NCmRlZiBhcmdfcGFyc2luZyhhcmd2KToNCg0KICAgIGdsb2JhbCB3ZWJob3N0DQogICAgZ2xvYmFsIG1vbmdvc3RyDQogICAgZ2xvYmFsIGRiX25hbWUNCg0KICAgIHRyeToNCiAgICAgICAgb3B0cywgYXJncyA9IGdldG9wdC5nZXRvcHQoYXJndiwgIi1wOi1tOi1kOiIpDQogICAgZXhjZXB0IGdldG9wdC5HZXRvcHRFcnJvcjoNCiAgICAgICAgcHJpbnQgKCJ1c2FnZSB2YWxpZGF0ZS5weSAtcCB3ZWJob3N0IC1tIG1vbmdvQ29ubmVjdFN0cmluZyAtZCBkYXRhYmFzZU5hbWUiKQ0KICAgICAgICBwcmludCAoIlx0d2ViaG9zdCBkZWZhdWx0cyB0byB7MH0iLmZvcm1hdCh3ZWJob3N0KSkNCiAgICAgICAgcHJpbnQgKCJcdG1vbmdvQ29ubmVjdGlvblN0cmluZyBkZWZhdWx0IHRvIHswfSIuZm9ybWF0KG1vbmdvc3RyKSkNCiAgICAgICAgcHJpbnQgKCJcdGRhdGFiYXNlTmFtZSBkZWZhdWx0cyB0byB7MH0iLmZvcm1hdChkYl9uYW1lKSkNCiAgICAgICAgc3lzLmV4aXQoMikNCiAgICBmb3Igb3B0LCBhcmcgaW4gb3B0czoNCiAgICAgICAgaWYgKG9wdCA9PSAnLWgnKToNCiAgICAgICAgICAgIHByaW50ICgidXNhZ2UgdmFsaWRhdGUucHkgLXAgd2ViaG9zdCAtbSBtb25nb0Nvbm5lY3RTdHJpbmcgLWQgZGF0YWJhc2VOYW1lIikNCiAgICAgICAgICAgIHN5cy5leGl0KDIpDQogICAgICAgIGVsaWYgb3B0IGluICgiLXAiKToNCiAgICAgICAgICAgIHdlYmhvc3QgPSBhcmcNCiAgICAgICAgICAgIHByaW50ICgiT3ZlcnJpZGluZyBIVFRQIGhvc3QgdG8gYmUgIiwgd2ViaG9zdCkNCiAgICAgICAgZWxpZiBvcHQgaW4gKCItbSIpOg0KICAgICAgICAgICAgbW9uZ29zdHIgPSBhcmcNCiAgICAgICAgICAgIHByaW50ICgiT3ZlcnJpZGluZyBNb25nb0RCIGNvbm5lY3Rpb24gc3RyaW5nIHRvIGJlICIsIG1vbmdvc3RyKQ0KICAgICAgICBlbGlmIG9wdCBpbiAoIi1kIik6DQogICAgICAgICAgICBkYl9uYW1lID0gYXJnDQogICAgICAgICAgICBwcmludCAoIk92ZXJyaWRpbmcgTW9uZ29EQiBkYXRhYmFzZSB0byBiZSAiLCBkYl9uYW1lKQ0KDQoNCiMgbWFpbiBzZWN0aW9uIG9mIHRoZSBjb2RlDQpkZWYgbWFpbihhcmd2KToNCiAgICAgICAgICAgIA0KICAgIGFyZ19wYXJzaW5nKGFyZ3YpDQogICAgZ2xvYmFsIGNvbm5lY3Rpb24NCiAgICBnbG9iYWwgZGINCg0KICAgIHByaW50ICgiV2VsY29tZSB0byB0aGUgSFcgMi4zIHZhbGlkYXRpb24gdGVzdGVyIikNCg0KICAgICMgY29ubmVjdCB0byB0aGUgZGIgKG1vbmdvc3RyIHdhcyBzZXQgaW4gYXJnX3BhcnNpbmcpDQogICAgY29ubmVjdGlvbiA9IHB5bW9uZ28uTW9uZ29DbGllbnQobW9uZ29zdHIpDQogICAgZGIgPSBjb25uZWN0aW9uW2RiX25hbWVdDQogICAgICAgICAgICANCg0KICAgIHVzZXJuYW1lID0gbWFrZV9zYWx0KDcpDQogICAgcGFzc3dvcmQgPSBtYWtlX3NhbHQoOCkNCg0KICAgICMgdHJ5IHRvIGNyZWF0ZSB1c2VyDQoNCiAgICBpZiAoY3JlYXRlX3VzZXIodXNlcm5hbWUsIHBhc3N3b3JkKSk6DQogICAgICAgIHByaW50ICgiVXNlciBjcmVhdGlvbiBzdWNjZXNzZnVsLiAiKQ0KICAgICAgICAjIHRyeSB0byBsb2dpbg0KICAgICAgICBpZiAodHJ5X3RvX2xvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCkpOg0KICAgICAgICAgICAgcHJpbnQgKCJVc2VyIGxvZ2luIHN1Y2Nlc3NmdWwuIikNCiAgICAgICAgICAgIHByaW50ICgiVmFsaWRhdGlvbiBDb2RlIGlzICIsICJqa2ZkczU4MzRqOThmbm0zOW5qZjA5MjBmMDIiKQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcHJpbnQgKCJVc2VyIGxvZ2luIGZhaWxlZCIpDQogICAgICAgICAgICBwcmludCAoIlNvcnJ5LCB5b3UgaGF2ZSBub3Qgc29sdmVkIGl0IHlldC4iKQ0KDQogICAgZWxzZToNCiAgICAgICAgcHJpbnQgKCJTb3JyeSwgeW91IGhhdmUgbm90IHNvbHZlZCBpdCB5ZXQuIikNCiAgICAgICAgc3lzLmV4aXQoMSkNCg0KDQppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOg0KICAgIG1haW4oc3lzLmFyZ3ZbMTpdKQ0KDQoNCg0KDQoNCg0KDQo="
eval(compile(base64.b64decode(code), "<string>", 'exec'))
